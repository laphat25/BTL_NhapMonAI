import tkinter as tk
from tkinter import messagebox, ttk
from heapq import heappush, heappop
import random
import os

# Silence deprecation warning
os.environ['TK_SILENCE_DEPRECATION'] = '1'

class NPuzzle:
    def __init__(self, n):
        self.n = n
        # M·ª•c ti√™u: c√°c s·ªë tƒÉng d·∫ßn, √¥ tr·ªëng (0) ·ªü cu·ªëi
        self.goal = tuple(list(range(1, n*n)) + [0])

    def heuristic(self, state):
        """T√≠nh t·ªïng kho·∫£ng c√°ch Manhattan c·ªßa c√°c √¥ t·ªõi v·ªã tr√≠ m·ª•c ti√™u."""
        dist = 0
        for idx, val in enumerate(state):
            if val == 0:
                continue
            # T·ªça ƒë·ªô hi·ªán t·∫°i
            x, y = divmod(idx, self.n)
            # T·ªça ƒë·ªô m·ª•c ti√™u c·ªßa val (val t·ª´ 1..n*n-1)
            goal_x = (val-1) // self.n
            goal_y = (val-1) % self.n
            dist += abs(x - goal_x) + abs(y - goal_y)
        return dist

    def neighbors(self, state):
        """Sinh c√°c tr·∫°ng th√°i con sau m·ªôt l·∫ßn di chuy·ªÉn √¥ tr·ªëng."""
        n = self.n
        zero_idx = state.index(0)
        x, y = divmod(zero_idx, n)
        moves = []
        # C√°c h∆∞·ªõng di chuy·ªÉn c·ªßa √¥ tr·ªëng
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < n and 0 <= new_y < n:
                new_idx = new_x * n + new_y
                new_state = list(state)
                # Ho√°n ƒë·ªïi √¥ tr·ªëng v·ªõi √¥ ch·ªâ ƒë·ªãnh
                new_state[zero_idx], new_state[new_idx] = new_state[new_idx], new_state[zero_idx]
                moves.append(tuple(new_state))
        return moves

    def solve(self, start):
        """√Åp d·ª•ng thu·∫≠t to√°n A* ƒë·ªÉ t√¨m ƒë∆∞·ªùng ƒëi t·ª´ start ƒë·∫øn goal."""
        open_set = []
        # (f, g, state, parent_state)
        heappush(open_set, (self.heuristic(start), 0, start, None))
        came_from = {start: None}
        cost = {start: 0}

        while open_set:
            f, g, current, parent = heappop(open_set)
            # N·∫øu ƒë·∫°t m·ª•c ti√™u, t√°i t·∫°o ƒë∆∞·ªùng ƒëi
            if current == self.goal:
                path = []
                while current is not None:
                    path.append(current)
                    current = came_from[current]
                return path[::-1]  # ng∆∞·ª£c l·∫°i

            # M·ªü r·ªông c√°c tr·∫°ng th√°i con
            for nxt in self.neighbors(current):
                new_g = g + 1
                # N·∫øu ch∆∞a g·∫∑p ho·∫∑c c√≥ ƒë∆∞·ªùng ƒëi t·ªët h∆°n
                if nxt not in cost or new_g < cost[nxt]:
                    cost[nxt] = new_g
                    priority = new_g + self.heuristic(nxt)
                    heappush(open_set, (priority, new_g, nxt, current))
                    came_from[nxt] = current
        return None  # n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c gi·∫£i ph√°p

class PuzzleGUI(tk.Frame):
    def __init__(self, master, n):
        super().__init__(master)
        self.n = n
        self.puzzle = NPuzzle(n)
        self.state = self.puzzle.goal
        self.tiles = []
        self.moves = 0
        self.dark_mode = False
        self.create_widgets()
        self.pack(padx=20, pady=20)

    def create_widgets(self):
        """T·∫°o l∆∞·ªõi √¥ v√† c√°c n√∫t ƒëi·ªÅu khi·ªÉn."""
        # Frame cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn
        control_frame = tk.Frame(self)
        control_frame.pack(pady=10)

        # N√∫t ch·ªçn k√≠ch th∆∞·ªõc
        size_frame = tk.Frame(control_frame)
        size_frame.pack(side=tk.LEFT, padx=10)
        tk.Label(size_frame, text="K√≠ch th∆∞·ªõc:", font=("Arial", 10)).pack(side=tk.LEFT)
        self.size_var = tk.StringVar(value=str(self.n))
        for size in [3, 4]:
            rb = tk.Radiobutton(size_frame, text=f"{size}x{size}", 
                               variable=self.size_var, value=str(size),
                               command=self.change_size,
                               font=("Arial", 10))
            rb.pack(side=tk.LEFT)

        # N√∫t x√°o tr·ªôn
        style = ttk.Style()
        style.configure("Custom.TButton", padding=5)
        
        shuffle_btn = ttk.Button(control_frame, text="X√°o tr·ªôn", 
                               command=self.shuffle_puzzle,
                               style="Custom.TButton")
        shuffle_btn.pack(side=tk.LEFT, padx=10)

        # N√∫t gi·∫£i t·ª± ƒë·ªông
        solve_btn = ttk.Button(control_frame, text="Gi·∫£i A*", 
                             command=self.solve_puzzle,
                             style="Custom.TButton")
        solve_btn.pack(side=tk.LEFT, padx=10)

        # N√∫t chuy·ªÉn ƒë·ªïi dark mode
        self.theme_btn = ttk.Button(control_frame, text="üåô Dark Mode",
                                  command=self.toggle_theme,
                                  style="Custom.TButton")
        self.theme_btn.pack(side=tk.LEFT, padx=10)

        # Hi·ªÉn th·ªã s·ªë b∆∞·ªõc di chuy·ªÉn
        self.moves_label = tk.Label(control_frame, 
                                  text="S·ªë b∆∞·ªõc: 0",
                                  font=("Arial", 10, "bold"))
        self.moves_label.pack(side=tk.LEFT, padx=10)

        # Frame cho b·∫£ng puzzle
        self.board_frame = tk.Frame(self)
        self.board_frame.pack(pady=10)
        
        # T·∫°o l∆∞·ªõi √¥
        self.create_board()

    def create_board(self):
        """T·∫°o b·∫£ng puzzle."""
        self.tiles = []
        for i in range(self.n):
            row = []
            for j in range(self.n):
                val = self.state[i*self.n + j]
                text = '' if val == 0 else str(val)
                bg_color = "#2C3E50" if self.dark_mode else "#E3F2FD"
                fg_color = "white" if self.dark_mode else "black"
                label = tk.Label(self.board_frame, text=text, 
                               width=4, height=2,
                               font=("Arial", 16, "bold"),
                               borderwidth=2, relief="raised",
                               bg=bg_color if val != 0 else "#34495E" if self.dark_mode else "#BBDEFB",
                               fg=fg_color)
                label.grid(row=i, column=j, padx=5, pady=5)
                label.bind("<Button-1>", lambda e, r=i, c=j: self.on_click(r, c))
                row.append(label)
            self.tiles.append(row)

    def toggle_theme(self):
        """Chuy·ªÉn ƒë·ªïi gi·ªØa light mode v√† dark mode."""
        self.dark_mode = not self.dark_mode
        self.theme_btn.config(text="‚òÄÔ∏è Light Mode" if self.dark_mode else "üåô Dark Mode")
        
        # C·∫≠p nh·∫≠t m√†u n·ªÅn
        bg_color = "#2C3E50" if self.dark_mode else "#F5F5F5"
        fg_color = "white" if self.dark_mode else "black"
        self.master.configure(bg=bg_color)
        self.configure(bg=bg_color)
        self.moves_label.configure(bg=bg_color, fg=fg_color)
        
        # C·∫≠p nh·∫≠t b·∫£ng
        self.update_ui()

    def update_ui(self):
        """C·∫≠p nh·∫≠t l·∫°i giao di·ªán theo self.state hi·ªán t·∫°i."""
        for i in range(self.n):
            for j in range(self.n):
                val = self.state[i*self.n + j]
                bg_color = "#2C3E50" if self.dark_mode else "#E3F2FD"
                fg_color = "white" if self.dark_mode else "black"
                self.tiles[i][j].config(
                    text='' if val == 0 else str(val),
                    bg=bg_color if val != 0 else "#34495E" if self.dark_mode else "#BBDEFB",
                    fg=fg_color
                )

    def change_size(self):
        """Thay ƒë·ªïi k√≠ch th∆∞·ªõc b·∫£ng."""
        new_size = int(self.size_var.get())
        if new_size != self.n:
            self.n = new_size
            self.puzzle = NPuzzle(new_size)
            self.state = self.puzzle.goal
            self.moves = 0
            self.moves_label.config(text="S·ªë b∆∞·ªõc: 0")
            # X√≥a v√† t·∫°o l·∫°i giao di·ªán
            self.board_frame.destroy()
            self.board_frame = tk.Frame(self)
            self.board_frame.pack(pady=10)
            self.create_board()

    def shuffle_puzzle(self):
        """X√°o tr·ªôn b·∫£ng puzzle."""
        # T·∫°o m·ªôt tr·∫°ng th√°i ng·∫´u nhi√™n c√≥ th·ªÉ gi·∫£i ƒë∆∞·ª£c
        state = list(range(self.n * self.n))
        random.shuffle(state)
        # Ki·ªÉm tra t√≠nh kh·∫£ thi
        inversions = 0
        for i in range(len(state)):
            for j in range(i + 1, len(state)):
                if state[i] != 0 and state[j] != 0 and state[i] > state[j]:
                    inversions += 1
        # N·∫øu s·ªë ngh·ªãch ƒë·∫£o l√† l·∫ª, ho√°n ƒë·ªïi 2 √¥ kh√¥ng ph·∫£i √¥ tr·ªëng
        if inversions % 2 == 1:
            for i in range(len(state)):
                if state[i] != 0 and state[i+1] != 0:
                    state[i], state[i+1] = state[i+1], state[i]
                    break
        self.state = tuple(state)
        self.moves = 0
        self.moves_label.config(text="S·ªë b∆∞·ªõc: 0")
        self.update_ui()

    def on_click(self, row, col):
        """X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i click v√†o m·ªôt √¥."""
        idx = row * self.n + col
        zero_idx = self.state.index(0)
        zr, zc = divmod(zero_idx, self.n)
        if abs(zr - row) + abs(zc - col) == 1:
            new_state = list(self.state)
            new_state[zero_idx], new_state[idx] = new_state[idx], new_state[zero_idx]
            self.state = tuple(new_state)
            self.moves += 1
            self.moves_label.config(text=f"S·ªë b∆∞·ªõc: {self.moves}")
            self.update_ui()
            # Ki·ªÉm tra chi·∫øn th·∫Øng
            if self.state == self.puzzle.goal:
                messagebox.showinfo("Ch√∫c m·ª´ng!", 
                                  f"B·∫°n ƒë√£ gi·∫£i xong puzzle trong {self.moves} b∆∞·ªõc!")

    def solve_puzzle(self):
        """Kh·ªüi ƒë·ªông thu·∫≠t to√°n A* v√† ch·∫°y t·ª´ng b∆∞·ªõc gi·∫£i."""
        path = self.puzzle.solve(self.state)
        if path:
            self.moves = 0
            for step in path:
                self.state = step
                self.moves += 1
                self.moves_label.config(text=f"S·ªë b∆∞·ªõc: {self.moves}")
                self.update_ui()
                self.after(200)  # ƒë·ª£i 200ms gi·ªØa c√°c b∆∞·ªõc
            messagebox.showinfo("Ho√†n th√†nh!", 
                              f"ƒê√£ gi·∫£i xong puzzle trong {self.moves} b∆∞·ªõc!")
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y gi·∫£i ph√°p!")

if __name__ == "__main__":
    root = tk.Tk()
    root.title("N-Puzzle Game")
    root.configure(bg="#F5F5F5")
    app = PuzzleGUI(root, 3)
    root.mainloop()
